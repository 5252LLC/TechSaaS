name: Security Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  # Schedule security tests to run weekly
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:
    # Allow manual triggering

env:
  PYTHON_VERSION: '3.9'
  DATABASE_URL: 'sqlite:///test_db.sqlite'
  FLASK_ENV: 'testing'
  FLASK_APP: 'app.py'
  REDIS_URL: 'redis://localhost:6379/0'

jobs:
  security-tests:
    runs-on: ubuntu-latest
    environment: test-environment
    
    services:
      # Start API service for testing
      api:
        image: techsaas/api:latest
        ports:
          - 5000:5000
        env:
          # Use a placeholder for tests - in production, this will be overridden
          JWT_SECRET_KEY: "dummy-key-for-testing-replace-in-production"
          TESTING: 'true'
        # If using Docker Compose setup
        # options: --health-cmd "curl -f http://localhost:5000/api/v1/status || exit 1" --health-interval 10s --health-timeout 5s --health-retries 5
    
    steps:
      # Use simpler major version references to avoid resolution errors
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install safety bandit pytest pytest-cov owasp-dependency-check-python

      - name: Run dependency security check
        run: |
          # Install OWASP Dependency Check
          wget -q https://github.com/jeremylong/DependencyCheck/releases/download/v7.0.0/dependency-check-7.0.0-release.zip
          unzip -q dependency-check-7.0.0-release.zip
          chmod +x dependency-check/bin/dependency-check.sh
          
          # Create reports directory
          mkdir -p reports
          
          # Run the dependency check
          ./dependency-check/bin/dependency-check.sh --scan . --out reports --format "HTML" \
            --suppression ./security/dependency-check-suppressions.xml --failOnCVSS 7

      - name: Run Bandit (Python Static Analysis)
        run: |
          mkdir -p reports
          bandit -r . -x ./tests,./venv -f json -o ./reports/bandit-report.json
          bandit -r . -x ./tests,./venv -f html -o ./reports/bandit-report.html

      - name: Run Safety Check
        run: |
          mkdir -p reports
          safety check -r requirements.txt --output json > ./reports/safety-report.json || true
          cat ./reports/safety-report.json

      - name: Run OWASP ZAP Full Scan
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        run: |
          # Install ZAP if needed
          wget -q https://github.com/zaproxy/zaproxy/releases/download/v2.12.0/ZAP_2.12.0_Linux.tar.gz
          tar -xf ZAP_2.12.0_Linux.tar.gz
          cd ZAP_2.12.0
          ./zap.sh -cmd -addonupdate
          mkdir -p ../reports
          ./zap.sh -cmd -quickurl http://localhost:5000 -quickout ../reports/zap-report.html
          cd ..

      - name: Run Security Tests
        run: |
          mkdir -p reports
          pytest tests/security/ -v --html=reports/pytest-security-report.html --cov=api/v1 --cov-report=html:reports/coverage

      - name: Generate security report summary
        run: |
          mkdir -p reports
          touch reports/summary.md
          echo "# Security Test Results" > ./reports/summary.md
          echo "" >> ./reports/summary.md
          echo "## Vulnerability Summary" >> ./reports/summary.md
          echo "" >> ./reports/summary.md
          
          if [ -f "./reports/dependency-check-report.xml" ]; then
            echo "- Dependency Check: $(grep -c "vulnerability" ./reports/dependency-check-report.xml || echo '0')" >> ./reports/summary.md
          else
            echo "- Dependency Check: report not found" >> ./reports/summary.md
          fi
          
          if [ -f "./reports/safety-report.json" ]; then
            echo "- Python Safety: $(cat ./reports/safety-report.json | grep -c "vulnerability" || echo '0')" >> ./reports/summary.md
          else
            echo "- Python Safety: report not found" >> ./reports/summary.md
          fi
          
          if [ -f "./reports/bandit-report.json" ]; then
            echo "- Bandit Findings: $(cat ./reports/bandit-report.json | grep -c "issue" || echo '0')" >> ./reports/summary.md
          else
            echo "- Bandit Findings: report not found" >> ./reports/summary.md
          fi
          
          if [ -f "./reports/pytest-security-report.html" ]; then
            echo "- Security Test Failures: $(grep -c "fail" ./reports/pytest-security-report.html || echo '0')" >> ./reports/summary.md
          else
            echo "- Security Test Failures: report not found" >> ./reports/summary.md
          fi

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: reports/

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: reports/pytest-security-report.html

      # Use bash script for notifications instead of third-party actions
      - name: Slack Notification
        if: failure() && github.event_name != 'pull_request'
        run: |
          # Only send notification if webhook is configured
          if [ -n "$WEBHOOK_URL" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data "{\"text\":\"Security Tests failed on branch $GITHUB_REF in $GITHUB_REPOSITORY!\"}" \
              "$WEBHOOK_URL"
          else
            echo "Webhook URL not configured, skipping notification"
          fi
        env:
          # Safe reference to secret - will be empty if not set
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Security Alert
        if: failure() && github.event_name != 'pull_request'
        run: |
          echo "::error::Security vulnerabilities detected! Check the reports for details."
